#!/usr/bin/env ruby

# First we need to load Scarpe and Lacci, which means figuring out where from.

# --dev option applies to all actions
use_dev = ARGV.delete("--dev") ? true : false
use_debug = ARGV.delete("--debug") ? true : false

# Default to local webview display if not otherwise given
ENV['SCARPE_DISPLAY'] ||= 'wv_local'

if use_debug
  ENV['SCARPE_DEBUG'] = 'true'
end
if use_dev
  dev_path = File.expand_path("../lib", __dir__)
  $LOAD_PATH.prepend dev_path
end

if use_dev
  require 'bundler/setup'
  Bundler.require(:default)
end
require "scarpe"
require "lacci/scarpe_cli"

include Scarpe::CLI

# We need to not use syntactic features of very recent Rubies in this file, so that it parses
# correctly in earlier Rubies and can successfully give the version-check error.
version_check

def print_usage
  puts DEFAULT_USAGE
end

add_env_categories("Scarpe::WV" => [
  env_or_default("SCARPE_TEST_CONTROL", "(none)"),
  env_or_default("SCARPE_TEST_RESULTS", "(none)"),
  env_or_default("SCARPE_TEST_DEBUG", "(none)"),
  env_or_default("SCARPE_HTML_RENDERER", "calzini"),
])

verb = "run"
verb_target = nil

case ARGV[0]
when "-v"
  # This will be fine, pass it through.
  verb = "-v"
when "env"
  if ARGV.length != 1
    print_usage
    exit -1
  end

  verb = "env"
when "run"
  if ARGV.length != 2
    print_usage
    exit -1
  end
  verb_target = ARGV[1]
else
  # Default to run
  if ARGV.length != 1
    print_usage
    exit -1
  end
  verb_target = ARGV[0]
end

case verb
when "-v"
  puts "Scarpe #{Scarpe::VERSION}"
  puts "Scarpe-Components #{Scarpe::Components::VERSION}"
  puts "Lacci #{Lacci::VERSION}"
when "run"
  # Run the Scarpe app file
  Shoes.run_app verb_target
when "env"
  print_env
else
  raise "Internal error! Unknown ./exe/scarpe verb!"
end
